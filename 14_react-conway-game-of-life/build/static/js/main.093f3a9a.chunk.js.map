{"version":3,"sources":["App.js","index.js"],"names":["operations","generateEmptyGrid","numRows","numCols","Array","fill","generateRandomGrid","from","length","Math","random","App","isTablet","useMediaQuery","query","useState","grid","setGrid","delay","setDelay","running","setRunning","runningRef","useRef","current","delayRef","runSimulation","useCallback","g","produce","gridCopy","i","j","neighbors","forEach","x","y","newI","newJ","setTimeout","useEffect","className","href","target","rel","onClick","step","min","max","value","type","onChange","e","Number","style","gridTemplateColumns","map","row","_","k","key","backgroundColor","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.093f3a9a.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport produce from \"immer\";\nimport { useMediaQuery } from \"react-responsive\";\nimport \"./App.scss\";\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nconst generateEmptyGrid = (numRows, numCols) => Array(numRows).fill(Array(numCols).fill(0));\nconst generateRandomGrid = (numRows, numCols) => Array.from({ length: numRows }, () => Array.from({ length: numCols }, () => (Math.random() > 0.7 ? 1 : 0)));\n\nconst App = () => {\n  let numRows = 35;\n  let numCols = 70;\n\n  const isTablet = useMediaQuery({ query: \"(max-width: 1224px)\" });\n  const isMobile = useMediaQuery({ query: \"(max-device-width: 425px)\" });\n\n  if (isMobile) {\n    numRows = 15;\n    numCols = 15;\n  } else if (isTablet) {\n    numRows = 35;\n    numCols = 35;\n  }\n\n  const [grid, setGrid] = useState(() => generateEmptyGrid(numRows, numCols));\n  const [delay, setDelay] = useState(0);\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const delayRef = useRef(delay);\n  delayRef.current = delay;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) return;\n\n    setGrid((g) =>\n      produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newJ = j + y;\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) neighbors += g[newI][newJ];\n            });\n\n            if (neighbors < 2 || neighbors > 3) gridCopy[i][j] = 0;\n            else if (g[i][j] === 0 && neighbors === 3) gridCopy[i][j] = 1;\n          }\n        }\n      })\n    );\n\n    setTimeout(runSimulation, delayRef.current);\n  }, [numRows, numCols]);\n\n  const onPlayToggle = () => {\n    setRunning(!running);\n    if (!running) {\n      runningRef.current = true;\n      runSimulation();\n    }\n  };\n\n  useEffect(() => {\n    setGrid(generateRandomGrid(numRows, numCols));\n  }, [numRows, numCols]);\n\n  return (\n    <div className=\"app\">\n      <h3 className=\"title\">\n        Conway's Game of Life&nbsp;&nbsp;\n        <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <i className=\"far fa-question-circle\" />\n        </a>\n      </h3>\n      <div className=\"button-group\">\n        <button className=\"button is-primary is-link\" onClick={onPlayToggle}>\n          {running ? \"Pause\" : \"Play\"}\n        </button>\n        <button className=\"button is-primary is-link\" onClick={() => setGrid(generateRandomGrid(numRows, numCols))}>\n          Random\n        </button>\n        <button className=\"button is-primary is-link\" onClick={() => setGrid(generateEmptyGrid(numRows, numCols))}>\n          Clear\n        </button>\n        <div className=\"slider\">\n          <span className=\"slider_label\">Delay: {delay}</span>\n          <input className=\"slider slider_input\" step=\"1\" min=\"0\" max=\"500\" value={delay} type=\"range\" onChange={(e) => setDelay(Number(e.target.value))} />\n        </div>\n      </div>\n      <div className=\"grid-container\" style={{ gridTemplateColumns: `repeat(${numCols}, 20px)` }}>\n        {grid.map((row, i) =>\n          row.map((_, k) => (\n            <div\n              key={`${i}-${k}`}\n              className=\"grid-item\"\n              style={{ backgroundColor: grid[i][k] ? \"#3273DC\" : undefined }}\n              onClick={() =>\n                setGrid(\n                  produce(grid, (gridCopy) => {\n                    gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                  })\n                )\n              }\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport \"bulma/css/bulma.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}