{"version":3,"sources":["App.js","index.js"],"names":["operations","generateEmptyGrid","numRows","numCols","Array","fill","App","isTablet","useMediaQuery","query","isMobile","console","log","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","i","j","neighbors","forEach","x","y","newI","newJ","setTimeout","className","href","target","rel","onClick","from","length","Math","random","generateRandomGrid","style","gridTemplateColumns","map","row","_","k","key","backgroundColor","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAKMA,G,MAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,KAGDC,EAAoB,SAACC,EAASC,GAAV,OAAsBC,MAAMF,GAASG,KAAKD,MAAMD,GAASE,KAAK,KAiGzEC,EA9FH,WACV,IAAIJ,EAAU,GACVC,EAAU,GAERI,EAAWC,wBAAc,CAAEC,MAAO,wBAClCC,EAAWF,wBAAc,CAAEC,MAAO,8BACxCE,QAAQC,IAAIV,EAASC,GACjBO,GACFR,EAAU,GACVC,EAAU,IACDI,IACTL,EAAU,GACVC,EAAU,IAZI,MAeQU,oBAAS,kBAAMZ,EAAkBC,EAASC,MAflD,mBAeTW,EAfS,KAeHC,EAfG,OAgBcF,oBAAS,GAhBvB,mBAgBTG,EAhBS,KAgBAC,EAhBA,KAkBVC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAEhBL,GAAQ,SAACQ,GAAD,OACNC,YAAQD,GAAG,SAACE,GACV,IADwB,IAAD,WACdC,GACP,IAFqB,eAEZC,GACP,IAAIC,EAAY,EAChB5B,EAAW6B,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAON,EAAII,EACXG,EAAON,EAAII,EACbC,GAAQ,GAAKA,EAAO9B,GAAW+B,GAAQ,GAAKA,EAAO9B,IAASyB,GAAaL,EAAES,GAAMC,OAGnFL,EAAY,GAAKA,EAAY,EAAGH,EAASC,GAAGC,GAAK,EAChC,IAAZJ,EAAEG,GAAGC,IAA0B,IAAdC,IAAiBH,EAASC,GAAGC,GAAK,IATrDA,EAAI,EAAGA,EAAIxB,EAASwB,IAAM,EAA1BA,IADFD,EAAI,EAAGA,EAAIxB,EAASwB,IAAM,EAA1BA,SAgBbQ,WAAWb,EAAe,MACzB,IAUH,OACE,yBAAKc,UAAU,OACb,wBAAIA,UAAU,SAAd,gCAEE,uBAAGC,KAAK,wDAAwDC,OAAO,SAASC,IAAI,uBAClF,uBAAGH,UAAU,6BAGjB,yBAAKA,UAAU,gBACb,4BAAQA,UAAU,4BAA4BI,QAjB/B,WACnBtB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,OAcKL,EAAU,QAAU,QAEvB,4BAAQmB,UAAU,4BAA4BI,QAAS,kBAAMxB,EAnE1C,SAACb,EAASC,GAAV,OAAsBC,MAAMoC,KAAK,CAAEC,OAAQvC,IAAW,kBAAME,MAAMoC,KAAK,CAAEC,OAAQtC,IAAW,kBAAOuC,KAAKC,SAAW,GAAM,EAAI,QAmE3EC,CAAmB1C,EAASC,MAAjG,UAGA,4BAAQgC,UAAU,4BAA4BI,QAAS,kBAAMxB,EAAQd,EAAkBC,EAASC,MAAhG,UAIF,yBAAKgC,UAAU,iBAAiBU,MAAO,CAAEC,oBAAoB,UAAD,OAAY3C,EAAZ,aACzDW,EAAKiC,KAAI,SAACC,EAAKtB,GAAN,OACRsB,EAAID,KAAI,SAACE,EAAGC,GAAJ,OACN,yBACEC,IAAG,UAAKzB,EAAL,YAAUwB,GACbf,UAAU,YACVU,MAAO,CAAEO,gBAAiBtC,EAAKY,GAAGwB,GAAK,eAAYG,GACnDd,QAAS,kBACPxB,EACES,YAAQV,GAAM,SAACW,GACbA,EAASC,GAAGwB,GAAKpC,EAAKY,GAAGwB,GAAK,EAAI,kB,MC/FtDI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.5ca8b93b.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\nimport { useMediaQuery } from \"react-responsive\";\nimport \"./App.scss\";\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nconst generateEmptyGrid = (numRows, numCols) => Array(numRows).fill(Array(numCols).fill(0));\nconst generateRandomGrid = (numRows, numCols) => Array.from({ length: numRows }, () => Array.from({ length: numCols }, () => (Math.random() > 0.7 ? 1 : 0)));\n\nconst App = () => {\n  let numRows = 35;\n  let numCols = 70;\n\n  const isTablet = useMediaQuery({ query: \"(max-width: 1224px)\" });\n  const isMobile = useMediaQuery({ query: \"(max-device-width: 425px)\" });\n  console.log(numRows, numCols);\n  if (isMobile) {\n    numRows = 15;\n    numCols = 15;\n  } else if (isTablet) {\n    numRows = 35;\n    numCols = 35;\n  }\n\n  const [grid, setGrid] = useState(() => generateEmptyGrid(numRows, numCols));\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) return;\n\n    setGrid((g) =>\n      produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newJ = j + y;\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) neighbors += g[newI][newJ];\n            });\n\n            if (neighbors < 2 || neighbors > 3) gridCopy[i][j] = 0;\n            else if (g[i][j] === 0 && neighbors === 3) gridCopy[i][j] = 1;\n          }\n        }\n      })\n    );\n\n    setTimeout(runSimulation, 0);\n  }, []);\n\n  const onPlayToggle = () => {\n    setRunning(!running);\n    if (!running) {\n      runningRef.current = true;\n      runSimulation();\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <h3 className=\"title\">\n        Conway's Game of Life&nbsp;&nbsp;\n        <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <i className=\"far fa-question-circle\" />\n        </a>\n      </h3>\n      <div className=\"button-group\">\n        <button className=\"button is-primary is-link\" onClick={onPlayToggle}>\n          {running ? \"Pause\" : \"Play\"}\n        </button>\n        <button className=\"button is-primary is-link\" onClick={() => setGrid(generateRandomGrid(numRows, numCols))}>\n          Random\n        </button>\n        <button className=\"button is-primary is-link\" onClick={() => setGrid(generateEmptyGrid(numRows, numCols))}>\n          Clear\n        </button>\n      </div>\n      <div className=\"grid-container\" style={{ gridTemplateColumns: `repeat(${numCols}, 20px)` }}>\n        {grid.map((row, i) =>\n          row.map((_, k) => (\n            <div\n              key={`${i}-${k}`}\n              className=\"grid-item\"\n              style={{ backgroundColor: grid[i][k] ? \"#3273DC\" : undefined }}\n              onClick={() =>\n                setGrid(\n                  produce(grid, (gridCopy) => {\n                    gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                  })\n                )\n              }\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport \"bulma/css/bulma.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}