{"version":3,"sources":["App.js","index.js"],"names":["operations","generateEmptyGrid","Array","fill","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","i","j","neighbors","forEach","x","y","newI","newJ","setTimeout","onClick","from","length","Math","random","className","style","gridTemplateColumns","map","row","_","k","key","backgroundColor","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAOMA,G,MAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,KAGDC,EAAoB,kBAAMC,MAdhB,IAc+BC,KAAKD,MAbpC,IAamDC,KAAK,KAqEzDC,EAlEH,WAAO,IAAD,EACQC,oBAAS,kBAAMJ,OADvB,mBACTK,EADS,KACHC,EADG,OAEcF,oBAAS,GAFvB,mBAETG,EAFS,KAEAC,EAFA,KAIVC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAEhBL,GAAQ,SAACQ,GAAD,OACNC,YAAQD,GAAG,SAACE,GACV,IADwB,IAAD,WACdC,GACP,IAFqB,eAEZC,GACP,IAAIC,EAAY,EAChBpB,EAAWqB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAON,EAAII,EACXG,EAAON,EAAII,EACbC,GAAQ,GAAKA,EAnCf,IAmCiCC,GAAQ,GAAKA,EAlC9C,KAkC8DL,GAAaL,EAAES,GAAMC,OAGnFL,EAAY,GAAKA,EAAY,EAAGH,EAASC,GAAGC,GAAK,EAChC,IAAZJ,EAAEG,GAAGC,IAA0B,IAAdC,IAAiBH,EAASC,GAAGC,GAAK,IATrDA,EAAI,EAAGA,EA7BV,GA6BuBA,IAAM,EAA1BA,IADFD,EAAI,EAAGA,EA7BR,GA6BqBA,IAAM,EAA1BA,SAgBbQ,WAAWb,EAAe,OACzB,IAUH,OACE,oCACE,4BAAQc,QAVS,WACnBlB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,OAMgCL,EAAU,QAAU,QACpD,4BAAQmB,QAAS,kBAAMpB,EA5CIL,MAAM0B,KAAK,CAAEC,OAf9B,KAeiD,kBAAM3B,MAAM0B,KAAK,CAAEC,OAdpE,KAcuF,kBAAOC,KAAKC,SAAW,GAAM,EAAI,WA4ClI,UACA,4BAAQJ,QAAS,kBAAMpB,EAAQN,OAA/B,SACA,yBAAK+B,UAAU,iBAAiBC,MAAO,CAAEC,oBAAoB,UAAD,OA5DlD,GA4DkD,aACzD5B,EAAK6B,KAAI,SAACC,EAAKlB,GAAN,OACRkB,EAAID,KAAI,SAACE,EAAGC,GAAJ,OACN,yBACEC,IAAG,UAAKrB,EAAL,YAAUoB,GACbN,UAAU,YACVC,MAAO,CAAEO,gBAAiBlC,EAAKY,GAAGoB,GAAK,kBAAeG,GACtDd,QAAS,kBACPpB,EACES,YAAQV,GAAM,SAACW,GACbA,EAASC,GAAGoB,GAAKhC,EAAKY,GAAGoB,GAAK,EAAI,kBCtEtDI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.49d07637.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\nimport \"./App.scss\";\n\nconst numRows = 30;\nconst numCols = 30;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nconst generateEmptyGrid = () => Array(numRows).fill(Array(numCols).fill(0));\nconst generateRandomGrid = () => Array.from({ length: numRows }, () => Array.from({ length: numCols }, () => (Math.random() > 0.7 ? 1 : 0)));\n\nconst App = () => {\n  const [grid, setGrid] = useState(() => generateEmptyGrid());\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) return;\n\n    setGrid((g) =>\n      produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newJ = j + y;\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) neighbors += g[newI][newJ];\n            });\n\n            if (neighbors < 2 || neighbors > 3) gridCopy[i][j] = 0;\n            else if (g[i][j] === 0 && neighbors === 3) gridCopy[i][j] = 1;\n          }\n        }\n      })\n    );\n\n    setTimeout(runSimulation, 10);\n  }, []);\n\n  const onPlayToggle = () => {\n    setRunning(!running);\n    if (!running) {\n      runningRef.current = true;\n      runSimulation();\n    }\n  };\n\n  return (\n    <>\n      <button onClick={onPlayToggle}>{running ? \"Pause\" : \"Play\"}</button>\n      <button onClick={() => setGrid(generateRandomGrid())}>Random</button>\n      <button onClick={() => setGrid(generateEmptyGrid())}>Clear</button>\n      <div className=\"grid-container\" style={{ gridTemplateColumns: `repeat(${numCols}, 20px)` }}>\n        {grid.map((row, i) =>\n          row.map((_, k) => (\n            <div\n              key={`${i}-${k}`}\n              className=\"grid-item\"\n              style={{ backgroundColor: grid[i][k] ? \"dodgerblue\" : undefined }}\n              onClick={() =>\n                setGrid(\n                  produce(grid, (gridCopy) => {\n                    gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                  })\n                )\n              }\n            />\n          ))\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}